[null,{"name":"SetGame","temp":"","event-type":"3","_id":"jKzEY","actions":[{"info":"3","storage":"1","varName2":"server","name":"Store Bot Client Info"},{"gameName":"s!help | ${tempVars(\"server\")} servers","gameLink":"","name":"Set Bot Game"}]},{"name":"reactionStart","temp":"","event-type":"1","_id":"Lwriz","actions":[{"behavior":"3","name":"Run Action Sequence Once"},{"behavior":"0","interpretation":"1","code":"const _this = this;\nconst fs = require('fs');\n\n//Settings\nconst dmUserAfter = true; // Default, can be changed to false\nvar messageSentAdd = 'Successfully added the role {rolename} in {server}';\nvar messageSentRemove = 'Successfully removed the role {rolename} in {server}';\n// The only variables that work rn, {rolename} and {server}\n\n\nif(fs.existsSync('./data/reactionRoleData.json')) {\n    fs.readFile('./data/reactionRoleData.json', function read(err, data) {\n        if (err) {\n            throw err;\n        }\n        data = JSON.parse(data)\n    \n        _this.storeValue(data, 3, 'reactionRoleInf', cache);\n    });\n} else {\n    fs.writeFile(\"./data/reactionRoleData.json\", \"{}\", function(err) {\n        if(err) {\n            return console.log(err);\n        }\n    });\n    _this.storeValue({}, 3, 'reactionRoleInf', cache);\n}\n\nclient.on('raw', packet => {\n    if (!['MESSAGE_REACTION_ADD', 'MESSAGE_REACTION_REMOVE'].includes(packet.t)) return;\n    const channel = client.channels.get(packet.d.channel_id);\n    if (channel.messages.has(packet.d.message_id)) return;\n    channel.fetchMessage(packet.d.message_id).then(message => {\n        const emoji = packet.d.emoji.id ? `${packet.d.emoji.name}:${packet.d.emoji.id}` : packet.d.emoji.name;\n        const reaction = message.reactions.get(emoji);\n        const reactionUser = client.users.get(packet.d.user_id);\n        if (reaction) reaction.users.set(packet.d.user_id, reactionUser);\n        if (!reactionUser.bot) {\n            if (packet.t === 'MESSAGE_REACTION_ADD') {\n                client.emit('messageReactionAdd', reaction, reactionUser);\n            }\n            if (packet.t === 'MESSAGE_REACTION_REMOVE') {\n                client.emit('messageReactionRemove', reaction, reactionUser);\n            }\n        }\n    });\n});\n\nclient.on('messageReactionAdd', async function(reaction, user) {\n    if (!user.bot) {\n        const reactionData = globalVars(\"reactionRoleInf\");\n        const reactionGuild = reaction.message.guild;\n        const reactionMessage = reaction.message;\n        if (reactionData.hasOwnProperty(reactionMessage.id)) {\n            var emojiName = reaction.emoji.name;\n            var roleInData = reactionData[reactionMessage.id].filter(re => re[0] == emojiName || re[0].name == emojiName)\n            if (roleInData.length != 0) {\n                var guilduser = await reactionGuild.fetchMember(user);\n                var roleData = roleInData[0][1];\n                var reactionRole = await reactionGuild.roles.get(roleData);\n                if (!guilduser.roles.has(roleData)) {\n                    guilduser.addRole(reactionRole);\n\n                    if (dmUserAfter){guilduser.send(messageSentAdd.replace(\"{rolename}\",`**${reactionRole.name}**`).replace(\"{server}\",`**${reactionGuild.name}**`));}\n                }\n            }\n        }\n    }\n\n});\n\nclient.on('messageReactionRemove', async function(reaction, user) {\n    const reactionData = globalVars(\"reactionRoleInf\");\n    const reactionGuild = reaction.message.guild;\n    const reactionMessage = reaction.message;\n    if (reactionData.hasOwnProperty(reactionMessage.id)) {\n        var emojiName = reaction.emoji.name;\n        var roleInData = reactionData[reactionMessage.id].filter(re => re[0] == emojiName || re[0].name == emojiName)\n        if (roleInData.length != 0) {\n            var guilduser = await reactionGuild.fetchMember(user);\n            var roleData = roleInData[0][1];\n            var reactionRole = await reactionGuild.roles.get(roleData);\n\n            if (guilduser.roles.has(roleData)) {\n                guilduser.removeRole(reactionRole);\n                if (dmUserAfter){guilduser.send(messageSentRemove.replace(\"{rolename}\",`**${reactionRole.name}**`).replace(\"{server}\",`**${reactionGuild.name}**`));}\n            }\n        }\n    }\n});","storage":"0","varName":"","name":"Run Script"}],"restriction":"0"},{"name":"reactionGet","temp":"msgReaction","event-type":"28","_id":"zimku","actions":[{"reaction":"1","varName":"msgReaction","info":"0","storage":"1","varName2":"messageRct","name":"Store Reaction Info"},{"behavior":"1","interpretation":"1","code":"const reaction = tempVars('msgReaction');\nconst msgRct = tempVars('messageRct');\nvar rectarray = globalVars('reactionRoleInf');\nvar usrWhoReacted = reaction.users.last();\nconst _this = this;\nconst fs = require('fs');\nvar messageSent = 'Successfully added the role {roleName} in {server}';\n// The only variables that work rn, {rolename} and {server}\nvar interval;\n\n// Setings\n\nconst dmUserAfter = true; // Default, can be changed to false\n\n//\nasync function checkRoles() {\n    try {\n        if (usrWhoReacted.id != client.user.id) {\n\n            if (rectarray[msgRct.id] != null) {\n                var newArr = rectarray[msgRct.id];\n                for (io = 0; io < newArr.length; io++) {\n                    if (newArr[io][0] == reaction.emoji.name || newArr[io][0].name == reaction.emoji.name) {\n                        var newUsr = await msgRct.guild.fetchMember(usrWhoReacted);\n                        var checkRole = await msgRct.guild.roles.get(newArr[io][1])\n                        if (checkRole != null) {\n                            let newUserArrayIds = [];\n                            let newUserArray = await reaction.users.array();\n\n                            newUserArray.forEach(useritem => {\n                                newUserArrayIds.push(useritem.id)\n                            });\n                            rectarray[msgRct.id][io][3] = newUserArrayIds;\n                            if (newUsr.roles.has(newArr[io][1])) {\n\n                                _this.storeValue(rectarray, 3, 'reactionRoleInf', cache)\n                                fs.writeFile(\"./data/reactionRoleData.json\", JSON.stringify(rectarray), function(err) {\n                                    if (err) {\n                                        return console.log(err);\n                                    }\n                                });\n                                break;\n                            } else {\n\n                                newUsr.addRole(checkRole);\n                                if (dmUserAfter) {\n                                    messageSent = messageSent.replace(/{roleName}/g, checkRole.name);\n                                    messageSent = messageSent.replace(/{server}/g, msgRct.guild.name);\n                                    newUsr.send(messageSent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_this.storeValue(rectarray, 3, 'reactionRoleInf', cache)\n                                fs.writeFile(\"./data/reactionRoleData.json\", JSON.stringify(rectarray), function(err) {\n                                    if (err) {\n                                        return console.log(err);\n                                    }\n                                });\n                                break;\n                            }\n                        } else {\n                            delete rectarray[msgRct.id];\n                            _this.storeValue(rectarray, 3, 'reactionRoleInf', cache);\n\n                            msgRct.edit({\n                                embed: {\n                                    color: 0xff0000,\n                                    title: \"Role Reaction Menu\",\n                                    description: `An error has occured.\\nOne of the roles, role name - ${newArr[io][2]} does not exist anymore.\\nIn turn, this embed has now shutdown.\\nPlease remake the embed.`,\n                                    timestamp: new Date()\n                                }\n                            });\n                            _this.callNextAction(cache);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n\ncheckRoles();","storage":"0","varName":"","name":"Run Script"}]},{"name":"*****DEBTWARNING","temp":"","event-type":"0","_id":"xMNyr","actions":[{"info":"0","find":"${msg.author.id}","storage":"1","varName":"MemberStorageDEBT","find2":"0","name":"Find Member"},{"member":"2","varName":"MemberStorageDEBT","dataName":"bank_debt_notifcation","comparison":"1","value":"1","iftrue":"2","iftrueVal":"22","iffalse":"0","iffalseVal":"","name":"Check Member Data"},{"member":"2","varName":"MemberStorageDEBT","dataName":"bank_rating","defaultVal":"0","storage":"1","varName2":"bank_rating","name":"Store Member Data"},{"member":"2","varName":"MemberStorageDEBT","dataName":"bank_debt_Amount","defaultVal":"0","storage":"1","varName2":"bank_debt_Amount","name":"Store Member Data"},{"member":"2","varName":"MemberStorageDEBT","dataName":"bank_debt_notifcation","defaultVal":"0","storage":"1","varName2":"bank_debt_notifcation","name":"Store Member Data"},{"member":"2","varName":"MemberStorageDEBT","dataName":"bank_debt_YESORNO","defaultVal":"\"No\"","storage":"1","varName2":"bank_debt_YESORNO","name":"Store Member Data"},{"storage":"1","varName":"RNGEMBED","min":"1","max":"2","name":"Generate Random Number"},{"storage":"1","varName":"RNGEMBED","comparison":"1","value":"1","iftrue":"0","iftrueVal":"","iffalse":"2","iffalseVal":"14","name":"Check Variable"},{"title":"OVERCHARGE ALERT! - DEBT","author":"${tempVars(\"MemberStorageDEBT\").displayName}","color":"#fc2605","url":"","authorIcon":"${tempVars(\"MemberStorageDEBT\").user.displayAvatarURL}","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"debt_warning_embed","name":"Create Embed Message"},{"storage":"1","varName":"debt_warning_embed","message":"                          **Caution** \n```While you have ran out of money in your wallet, the bank has now enabled Overcharge.\nPlease be sure to load more money and or check your wallet card before using as you may accidently overload it.```\n*Overcharge, lets you keep using your card and keep making them purchases up to a limits set by commands*","name":"Set Embed Description"},{"storage":"1","varName":"debt_warning_embed","message":"Just be sure to pay your entire debt before bad things happen!\nEnjoy the extra cash!","footerIcon":"","name":"Set Embed Footer"},{"storage":"1","varName":"debt_warning_embed","channel":"5","varName2":"MemberStorageDEBT","storage3":"0","varName3":"","iffalse":"2","iffalseVal":"18","name":"Send Embed Message"},{"call":"19","name":"Jump to Action"},{"storage":"1","varName":"RNGEMBED","comparison":"1","value":"2","iftrue":"0","iftrueVal":"","iffalse":"1","iffalseVal":"","name":"Check Variable"},{"title":"Overcharge Caution! - DEBT","author":"${tempVars(\"MemberStorageDEBT\").displayName}","color":"#ecf24d","url":"","authorIcon":"${tempVars(\"MemberStorageDEBT\").user.displayAvatarURL}","authorUrl":"","imageUrl":"","thumbUrl":"","timestamp":"false","text":"","year":"","month":"","day":"","hour":"","minute":"","second":"","storage":"1","varName":"debt_warning_embed","name":"Create Embed Message"},{"storage":"1","varName":"debt_warning_embed","message":"                          **Caution** \n```You ran out of money in your wallet!, the bank has now enabled Overcharge.\nPlease be sure to load more money and or check your wallet card before using as you may accidently overload it.```\n*Overcharge, lets you keep using your card and keep making them purchases up to a limits set by commands*","name":"Set Embed Description"},{"storage":"1","varName":"debt_warning_embed","message":"Please be sure to pay the debt quickly! The more debt you occur, some commands may not like that!\nOtherwise, enjoy the extra cash!","footerIcon":"","name":"Set Embed Footer"},{"storage":"1","varName":"debt_warning_embed","channel":"5","varName2":"MemberStorageDEBT","storage3":"0","varName3":"","iffalse":"2","iffalseVal":"18","name":"Send Embed Message"},{"member":"2","varName":"MemberStorageDEBT","dataName":"bank_debt_YESORNO","changeType":"0","value":"\"Yes\"","name":"Control Member Data"},{"member":"2","varName":"MemberStorageDEBT","dataName":"bank_rating","changeType":"1","value":"-7","name":"Control Member Data"},{"member":"2","varName":"MemberStorageDEBT","dataName":"bank_debt_notifcation","changeType":"0","value":"1","name":"Control Member Data"},{"comment":"f","color":"#ff0000","name":"Comment"}]},{"name":"reactionRev","temp":"msgReaction","event-type":"29","_id":"ZQmhC","actions":[{"reaction":"1","varName":"msgReaction","info":"0","storage":"1","varName2":"messageRct","name":"Store Reaction Info"},{"behavior":"1","interpretation":"1","code":"const reaction = tempVars('msgReaction');\nconst msgRct = tempVars('messageRct');\nvar rectarray = globalVars('reactionRoleInf');\nlet usrWhoReacted = reaction.users.array();\nconst _this = this;\nconst fs = require('fs');\n\nlet newUserArrayIds = [];\nlet newUserArray = reaction.users.array();\n\nnewUserArray.forEach(useritem => {\n    newUserArrayIds.push(useritem.id)\n});\n\nvar messageSent = 'Successfully removed the role {roleName} in {server}';\n// The only variables that work rn, {rolename} and {server}\nvar actualUser;\n// Setings\n\nconst dmUserAfter = true; // Default, can be changed to false\n\n//\nasync function checkRoles() {\n    try {\n        if (rectarray[msgRct.id] != null) {\n            var newArr = rectarray[msgRct.id];\n            for (io = 0; io < newArr.length; io++) {\n                if (newArr[io][0] == reaction.emoji.name || newArr[io][0].name == reaction.emoji.name) {\n                    if (rectarray[msgRct.id][io][3] != null) {\n                        usrWhoReacted = rectarray[msgRct.id][io][3].filter(val => !newUserArrayIds.includes(val))[0];\n                        if (usrWhoReacted != null) {\n                            var newUsr = await msgRct.guild.fetchMember(usrWhoReacted);\n                            var checkRole = await msgRct.guild.roles.get(newArr[io][1]);\n                            if (checkRole != null) {\n                                if (!newUsr.roles.has(newArr[io][1])) {\n                                    var newUsrIDs = [];\n                                    var arrUsrIds = await reaction.users.array();\n                                    arrUsrIds.forEach(useritem => {\n                                        newUsrIDs.push(useritem.id)\n                                    });\n                                    rectarray[msgRct.id][io][3] = newUsrIDs;\n                                    _this.storeValue(rectarray, 3, 'reactionRoleInf', cache);\n                                    fs.writeFile(\"./data/reactionRoleData.json\", JSON.stringify(rectarray), function(err) {\n                                        if (err) {\n                                            return console.log(err);\n                                        }\n                                    });\n                                    break;\n                                } else {\n                                    var newUsrIDs = [];\n                                    var arrUsrIds = await reaction.users.array();\n                                    arrUsrIds.forEach(useritem => {\n                                        newUsrIDs.push(useritem.id)\n                                    });\n                                    rectarray[msgRct.id][io][3] = newUsrIDs;\n                                    _this.storeValue(rectarray, 3, 'reactionRoleInf', cache)\n                                    newUsr.removeRole(checkRole);\n                                    if (dmUserAfter) {\n                                        messageSent = messageSent.replace(/{roleName}/g, checkRole.name);\n                                        messageSent = messageSent.replace(/{server}/g, msgRct.guild.name);\n                                        newUsr.send(messageSent);\n                                    }\n                                    fs.writeFile(\"./data/reactionRoleData.json\", JSON.stringify(rectarray), function(err) {\n                                        if (err) {\n                                            return console.log(err);\n                                        }\n                                    });\n                                    break;\n                                }\n                            } else {\n                                delete rectarray[msgRct.id];\n                                _this.storeValue(rectarray, 3, 'reactionRoleInf', cache);\n                                msgRct.edit({\n                                    embed: {\n                                        color: 0xff0000,\n                                        title: \"Role Reaction Menu\",\n                                        description: `An error has occured.\\nOne of the roles, role name - ${newArr[io][2]} does not exist anymore.\\nIn turn, this embed has now shutdown.\\nPlease remake the embed.`,\n                                        timestamp: new Date()\n                                    }\n                                });\n                                _this.callNextAction(cache);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } catch (error) {\n        console.log(error);\n    }\n\n}\n\n\ncheckRoles();","storage":"0","varName":"","name":"Run Script"}]},{"name":"reactionStart","temp":"","event-type":"1","_id":"Lwriz","actions":[{"behavior":"0","interpretation":"1","code":"const _this = this;\nconst fs = require('fs');\nvar someArray = [];\nvar someNum = 0;\nvar globalData;\nvar interval;\n\nfunction fetchMessages() {\n    if (someNum != someArray.length) {\n        var channelToFetch = client.channels.get(someArray[someNum]);\n        if (channelToFetch != null) {\n           channelToFetch.fetchMessages({ limit: 100 });\n           console.log(`Fetched messages in channel id ${someArray[someNum]}`);\n           someNum = someNum + 1;\n        } else {\n           delete globalData[someArray[someNum]];\n           fs.writeFile(\"./resources/serverRoleMenu.json\", JSON.stringify(globalData), function(err) {\n               if(err) {\n                   return console.log(err);\n               }\n           }); \n        }\n    } else {\n       console.log('Finished fetching messages from all logged servers.')\n       clearInterval(interval);\n    }\n   }\n\nif(fs.existsSync('./data/reactionRoleData.json')) {\n    fs.readFile('./data/reactionRoleData.json', function read(err, data) {\n        if (err) {\n            throw err;\n        }\n        data = JSON.parse(data)\n    \n        _this.storeValue(data, 3, 'reactionRoleInf', cache);\n    });\n} else {\n    fs.writeFile(\"./data/reactionRoleData.json\", \"{}\", function(err) {\n        if(err) {\n            return console.log(err);\n        }\n    });\n    _this.storeValue({}, 3, 'reactionRoleInf', cache);\n}\n\n\n\nif(fs.existsSync('./resources/serverRoleMenu.json')) {\n    fs.readFile('./resources/serverRoleMenu.json', async function read(err, data) {\n        if (err) {\n            throw err;\n        }\n        var DataToLoop = JSON.parse(data);\n        globalData = DataToLoop;\n        for (var key in DataToLoop) {\n            if (DataToLoop.hasOwnProperty(key)) {\n                await someArray.push(DataToLoop[key]);\n            }\n        }\n        interval = setInterval(fetchMessages, 2000);\n    })\n\n} else {\n    fs.writeFile(\"./resources/serverRoleMenu.json\", \"{}\", function(err) {\n        if(err) {\n            return console.log(err);\n        }\n    });\n}\n\n","storage":"0","varName":"","name":"Run Script"}]},{"name":"Music Setup","temp":"","event-type":"1","_id":"PZPZX","actions":[{"comment":"This Modifys the bot.js file to allow the Now Playing command to work!!","color":"#ff0000","name":"Comment"},{"name":"Welcome"}]}]